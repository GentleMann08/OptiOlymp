import asyncio
import sqlite3

import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.filters import Text, Command
from aiogram.types import CallbackQuery, Message
from aiogram.types import FSInputFile
from telethon.sync import TelegramClient

from olymps import get_olymps
import database
import parse
import structure


bot = Bot('Bot Token Here')
dp = Dispatcher()
admins = [1219940023, 1132908805]


def zagl(string):
    return string[0].upper() + string[1:]


def set_program_text(program):
    return f'üìç –ü–æ—è–≤–∏–ª–∞—Å—å {structure.set_title(program["title"])}\n\n' \
           f'{structure.icons[program["subject"]][0]} –ü—Ä–µ–¥–º–µ—Ç - {program["subject"]}\n' \
           f'üéí –î–ª—è {program["class"]} –∫–ª–∞—Å—Å–æ–≤\n' \
           f'üóìÔ∏è –°{program["dates"][1:]}\n' \
           f'{structure.place_icons[program["place"]][0]} –ú–µ—Å—Ç–æ - {structure.place_icons[program["place"]][1]}\n\n' \
           f'‚ùó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ {program["register"]}'


def set_olymp_text(olymp):
    title = list(olymp['dates'].keys())[0]
    date = olymp['dates'][title].lower()
    temp = "\n".join([zagl(i) for i in olymp["subjects"]])
    if not '–¥–æ' in date:
        date = '–¥–æ ' + date
    return f'üìç –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è {olymp["title"]}\n\n' \
           f'üëÄ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: {temp}\n' \
           f'üéí –î–ª—è {olymp["classes"][0]}-{olymp["classes"][-1]} –∫–ª–∞—Å—Å–æ–≤\n' \
           f'üèÖ –ú–µ—Å—Ç–æ –†–¶–û–ò - {olymp["place"]}\n' \
           f'üì∂ –£—Ä–æ–≤–µ–Ω—å - {olymp["level"]}\n' \
           f'‚ùó {zagl(title)} {date}'


async def program_loop():
    print('–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º')
    users = database.send_program()
    programs = parse.main()
    new = []
    for program in programs:
        for user in users[program['subject']]:
            try:
                await bot.send_photo(chat_id=user,
                                     photo=program['image'],
                                     caption=set_program_text(program),
                                     reply_markup=structure.set_url(program["url"]))
                print(f'[+] {program["title"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}')

                await asyncio.sleep(2.1)
            except:
                pass
        new.append(program['url'])
    database.new_urls(new)
    print('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await asyncio.sleep(21600)


async def olymp_loop():
    print('–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ª–∏–º–ø–∏–∞–¥')
    users = database.send_olymp()
    olymps = get_olymps()
    for olymp in olymps:
        for subject in olymp['subjects']:
            if not zagl(subject) in structure.subjects:
                continue
            for user in users[zagl(subject)]:
                try:
                    await bot.send_message(chat_id=user,
                                           text=set_olymp_text(olymp),
                                           reply_markup=structure.set_url(olymp["url"]))
                    print(f'[+] {olymp["title"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}')

                    await asyncio.sleep(2.1)
                except:
                    pass
    print('–†–∞—Å—Å—ã–ª–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    await asyncio.sleep(86400)
    await olymp_loop()


async def start_bot():

    async with TelegramClient('Abdosha0', api_id, api_hash,
                              device_model="iPhone 13 Pro Max",
                              system_version="14.8.1",
                              app_version="8.4",
                              lang_code="en",
                              system_lang_code="en-US") as client:
        await client.send_message('more_vzlet_bot', '/start')
        await client.send_message('more_vzlet_bot', '/ol')


@dp.message(Command(commands=['log']))
async def log(message: Message):
    if message.from_user.id in admins:
        try:
            await message.answer_document(FSInputFile(path='/bot/nohup.out'))
        except:
            await message.answer('–§–∞–π–ª –ø—É—Å—Ç–æ–π')
        df = pd.read_sql_query("SELECT * FROM user_info", sqlite3.connect('db.db'))
        df.to_excel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.xlsx')
        df = pd.read_sql_query("SELECT * FROM sent", sqlite3.connect('db.db'))
        df.to_excel('–°—Å—ã–ª–∫–∏.xlsx')
        await message.answer_document(FSInputFile(path='/bot/–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.xlsx'))
        await message.answer_document(FSInputFile(path='/bot/–°—Å—ã–ª–∫–∏.xlsx'))


@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    print(message.from_user.username, message.from_user.id)
    if message.from_user.username == 'Abdosha0':
        await olymp_loop()
        return
    database.start_command(message.from_user.id)
    await message.answer(text='üëã –ü—Ä–∏–≤–µ—Ç, –ø–æ–¥–º–æ—Å–∫–æ–≤–Ω—ã–π –æ–ª–∏–º–ø–∏–∞–¥–Ω–∏–∫!\n\n'
                              '‚ÑπÔ∏è –Ø –±–æ—Ç, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–º–µ–Ω –≤ –û–¶ –í–∑–ª—ë—Ç.\n',
                         reply_markup=structure.main_menu)
    await message.answer(
        text='‚öôÔ∏è –î–∞–≤–∞–π –≤–∫–ª—é—á–∏–º –Ω—É–∂–Ω—ã–µ –¥–ª—è —Ç–µ–±—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        reply_markup=structure.set_middle_but('0', message.from_user.id))
    await asyncio.sleep(180)
    await message.answer(
        text='üìç –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –ø–æ –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª—è–º?',
        reply_markup=structure.channel)


@dp.message(Text(text=['üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π']))
async def new_phone(message: Message):
    print(message.from_user.username, message.from_user.id, message.text)
    await message.answer(text='–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                         reply_markup=structure.set_middle_but('0', message.from_user.id))


@dp.callback_query(Text(text=list(structure.graph.keys())))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.from_user.id, callback.data)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                     reply_markup=structure.set_middle_but(callback.data, callback.from_user.id))


@dp.callback_query(Text(text=structure.subjects))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.from_user.id, callback.data)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                     reply_markup=structure.set_notif(callback.from_user.id, callback.data))


@dp.callback_query(Text(text='olymp'))
async def cansel(callback: CallbackQuery):
    print(callback.from_user.username, callback.from_user.id, callback.data)
    database.set_olymp(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=structure.set_middle_but('0', callback.from_user.id))


@dp.message(lambda message: message.from_user.id == message.chat.id)
async def message(message: Message):  #
    print(message.from_user.username, message.text)
    await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


if __name__ == '__main__':
    # asyncio.run(start_bot())
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    dp.run_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
