from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

import database

onoff = ['‚ùå', '‚úÖ']

icons = {'–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è': ['üî≠', 14], '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': ['üìè', 21], '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': ['‚úçÔ∏è', 22], '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': ['üë•', 23],
         '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': ['üìö', 24], '–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫': ['üá™üá∏', 25], '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': ['üåç', 26], '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è': ['üõ†Ô∏è', 8],
         '–ò—Å—Ç–æ—Ä–∏—è': ['üìú', 27], '–ò—Å–∫—É—Å—Å—Ç–≤–æ (–ú–•–ö)': ['üèõÔ∏è', 28], '–≠–∫–æ–Ω–æ–º–∏–∫–∞': ['üíπ', 29], '–ü—Ä–∞–≤–æ': ['‚öñÔ∏è', 30],
         '–ë–∏–æ–ª–æ–≥–∏—è': ['üçÉ', 31], '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫': ['üá¨üáß', 32], '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫': ['üáÆüáπ', 33],
         '–ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫': ['üá®üá≥', 34], '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫': ['üá´üá∑', 35], '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫': ['üá©üá™', 36],
         '–≠–∫–æ–ª–æ–≥–∏—è': ['üå≥', 7], '–•–∏–º–∏—è': ['üß™', 37], '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': ['üíª', 47], '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞': ['üèÄ', 48],
         '–§–∏–∑–∏–∫–∞': ['‚öõÔ∏è', 49],

         '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': ['üíò', 57],

         '–ê–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å': ['üñåÔ∏è', 53],
         '–ê–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∫—É–ª—å–ø—Ç—É—Ä–∞': ['üçØ', 53], '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ': ['üßë‚Äçüé®', 53],
         '–®–∞—Ö–º–∞—Ç—ã': ['‚ôüÔ∏è', 9]}

subjects = list(icons.keys())

iss_keys = {'–û—Å–Ω–æ–≤—ã –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –∞–∫–≤–∞—Ä–µ–ª—å–Ω–æ–π –∂–∏–≤–æ–ø–∏—Å–∏': '–ê–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',
            '–û—Å–Ω–æ–≤—ã –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∏–∫–ª–∞–¥–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
            '–û—Å–Ω–æ–≤—ã –∞–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∫—É–ª—å–ø—Ç—É—Ä—ã': '–ê–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∫—É–ª—å–ø—Ç—É—Ä–∞'}

place_icons = {"–ê–ù–û–û ¬´–§–∏–∑—Ç–µ—Ö-–ª–∏—Ü–µ–π¬ª –∏–º. –ü.–õ. –ö–∞–ø–∏—Ü—ã": ["üíô", "–§–∏–∑—Ç–µ—Ö-–ª–∏—Ü–µ–π"],
               "–≤ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ¬´–í–µ–±–∏–Ω–∞—Ä¬ª": ["ü§ç", "–û–Ω–ª–∞–π–Ω"],
               "–ê–ù–û–û ¬´–û–±–ª–∞—Å—Ç–Ω–∞—è –≥–∏–º–Ω–∞–∑–∏—è –∏–º. –ï. –ú. –ü—Ä–∏–º–∞–∫–æ–≤–∞¬ª": ["‚ù§Ô∏è", "–ì–∏–º–Ω–∞–∑–∏—è –ü—Ä–∏–º–∞–∫–æ–≤–∞"],
               "–§–ì–ë–û–£ –í–û ¬´–ê–∫–∞–¥–µ–º–∏—è –∞–∫–≤–∞—Ä–µ–ª–∏ –∏ –∏–∑—è—â–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤ –°–µ—Ä–≥–µ—è –ê–Ω–¥—Ä–∏—è–∫–∏¬ª": ["üíö", "–ê–∫–∞–¥–µ–º–∏—è –ê–Ω–¥—Ä–∏—è–∫–∏"],
               "–û–û–û ¬´–°–ö –°–∞—Ç—É—Ä–Ω¬ª": ["üíú", "–°–ö –°–∞—Ç—É—Ä–Ω"]}

title = {
    '–ü–µ—Ä–≤–∞—è': "I",
    '–í—Ç–æ—Ä–∞—è': "II",
    '–¢—Ä–µ—Ç—å—è': "III",
    '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è': "IV",
    '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è ': '',
    '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è ': '',
    '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è ': ''

}


def set_title(data: str):
    for i in title.keys():
        data = data.replace(i, title[i])
    data = data.split('(')[0].replace('–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–º–µ–Ω–∞')
    if data[0] != 'I':
        data = data[0].lower() + data[1:]
    return data


mouth = {' —è–Ω–≤–∞—Ä—è ': '.01.',
         ' —Ñ–µ–≤—Ä–∞–ª—è ': '.02.',
         ' –º–∞—Ä—Ç–∞ ': '.03.',
         ' –∞–ø—Ä–µ–ª—è ': '.04.',
         ' –º–∞—è ': '.05.',
         ' –∏—é–Ω—è ': '.06.',
         ' –∏—é–ª—è ': '.07.',
         ' –∞–≤–≥—É—Å—Ç–∞ ': '.08.',
         ' —Å–µ–Ω—Ç—è–±—Ä—è ': '.09.',
         ' –æ–∫—Ç—è–±—Ä—è ': '.10.',
         ' –Ω–æ—è–±—Ä—è ': '.11.',
         ' –¥–µ–∫–∞–±—Ä—è ': '.12.'}

graph = {'0': ["–ù–∞—É–∫–∞", "–ò—Å–∫—É—Å—Å—Ç–≤–æ", "–°–ø–æ—Ä—Ç"],

         "–ù–∞—É–∫–∞": ["–Ø–∑—ã–∫–∏", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏", "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏", "–ü—Ä–æ—á–µ–µ"],
         "–ò—Å–∫—É—Å—Å—Ç–≤–æ": ['–ê–∫–≤–∞—Ä–µ–ª—å–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å', '–ê–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∫—É–ª—å–ø—Ç—É—Ä–∞', '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ'],
         "–°–ø–æ—Ä—Ç": ["–®–∞—Ö–º–∞—Ç—ã"],

         "–Ø–∑—ã–∫–∏": ['–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
                   '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫', '–ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫', '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫'],
         "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏": ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è'],
         "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏": ['–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', "–≠–∫–æ–ª–æ–≥–∏—è", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è"],
         "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏": ['–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–ò—Å–∫—É—Å—Å—Ç–≤–æ (–ú–•–ö)', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ü—Ä–∞–≤–æ',
                                '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'],
         "–ü—Ä–æ—á–µ–µ": ["–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞']
         }
back_graph = {}
for key in graph:
    for sub in graph[key]:
        back_graph[sub] = key
keys = [i for i in graph]

channel = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(
        text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
        url='https://t.me/vzlet_group')]])


def set_url(url):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏',
            url=url)]])


def set_back(now):
    return [InlineKeyboardButton(
        text='üö™ –ù–∞–∑–∞–¥',
        callback_data=back_graph[now])]


def olymp_button(user_id):
    temp = database.get(user_id, 'olymp')
    if not temp:
        temp = 0
    return InlineKeyboardButton(
        text=f'{onoff[temp]} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö',
        callback_data='olymp')


def set_middle_but(now, user_id):
    if now == '0':
        but = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text=i,
                callback_data=i)] for i in graph[now]])
        but.inline_keyboard.append([olymp_button(user_id)])
        return but
    if graph[now][0] in subjects:
        notifs = database.get_notif(user_id)
        but = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text=f'{i} - {onoff[notifs[subjects.index(i)]]}',
                callback_data=i)] for i in graph[now]])
        but.inline_keyboard.append(set_back(now))
        return but
    but = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text=i,
            callback_data=i)] for i in graph[now]])
    but.inline_keyboard.append(set_back(now))
    return but


def set_notif(user_id, subject):
    notifs = database.set_notif(user_id, subjects.index(subject))
    now = ''
    for i in graph:
        for j in graph[i]:
            if subject in j:
                now = i
                break

    but = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text=f'{i} - {onoff[notifs[subjects.index(i)]]}',
            callback_data=i)] for i in graph[now]])
    but.inline_keyboard.append(set_back(now))
    return but


settings = KeyboardButton(text='üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')

main_menu = ReplyKeyboardMarkup(keyboard=[[settings]],
                                resize_keyboard=True)

# olymp_keyboard = InlineKeyboardMarkup(
#     inline_keyboard=[[reboot]])

if __name__ == "__main__":
    pass
